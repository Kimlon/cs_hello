// Autogenerated from Pigeon (v16.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Schema {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /**
   * 用户信息实体类
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class UserInfo {
    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String email;

    public @Nullable String getEmail() {
      return email;
    }

    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    public static final class Builder {

      private @Nullable String name;

      @CanIgnoreReturnValue
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable String email;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }

      public @NonNull UserInfo build() {
        UserInfo pigeonReturn = new UserInfo();
        pigeonReturn.setName(name);
        pigeonReturn.setEmail(email);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(name);
      toListResult.add(email);
      return toListResult;
    }

    static @NonNull UserInfo fromList(@NonNull ArrayList<Object> list) {
      UserInfo pigeonResult = new UserInfo();
      Object name = list.get(0);
      pigeonResult.setName((String) name);
      Object email = list.get(1);
      pigeonResult.setEmail((String) email);
      return pigeonResult;
    }
  }

  private static class UserInfoApiCodec extends StandardMessageCodec {
    public static final UserInfoApiCodec INSTANCE = new UserInfoApiCodec();

    private UserInfoApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return UserInfo.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof UserInfo) {
        stream.write(128);
        writeValue(stream, ((UserInfo) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * Description : 定义与原生通信--通过自动生成减少手写代码量
   * 请求参数和返回结果都必需是类结构 否则无法生成文件
   * - Flutter 调用 Native 方法 ( @HostApi() )
   * - Native 调用 Flutter 方法 ( @FlutterApi() )
   * Flutter 调用原生代码
   *
   * Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface UserInfoApi {
    /**获取用户信息 */
    @NonNull 
    UserInfo getUserInfo();

    /** The codec used by UserInfoApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return UserInfoApiCodec.INSTANCE;
    }
    /**Sets up an instance of `UserInfoApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable UserInfoApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.cs_hello.UserInfoApi.getUserInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  UserInfo output = api.getUserInfo();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
